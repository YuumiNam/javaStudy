0. 메이븐 프로젝트 디렉토리
chapter02 - src - main - java - chapter02(패키지) - Goods.java, GoodsApp.java
              |
              - target - classes - chapter02(패키지) - Goods.class, GoodsApp.class
                               |
                         (classpath)



1. 클래스와 객체
클래스 = 객체를 정의해놓은것,객체를 생성하는 것에 사용됨 (설계도, 과자틀)
객체 = 정보를 효율적으로 관리하기위하여 의미를 부여한 논리적단위 (속성 = 필드, 기능 = 메소드)

객체가 메모리에 할당되어 실제로 사용되는것을 인스턴스라고 부른다.
(객체 = 인스턴스)



2. 객체지향언어의 주요 기능
캡슐화 - 객체를 작성할 때 숨겨야하는 필드와 메소드, 공개하는 필드와 메소드를 구분하여 작성.
즉, 객체의 데이터가 실제 어떻게 처리되는지 자세히 알 필요가 없다.

상속 - 기존의 클래스에서 필드와 메소드를 재사용(상속)

다형성 - 객체지향의 꽃, override와 overload를 통해 하나의 메소드나 클래스를 다양한 구현으로 사용가능



3. 클래스의 구조
클래스   ->   클래스헤더 - 필드 - 메소드 - 생성자



4. 객체를 생성하는 과정
(Goods를 클래스로 만들었고, GoodsApp 이라는 main클래스에서 Goods클래스를 객체로 가져오는상황)
 
Goods    goods      =          new                Goods();   
(타입)     (변수)           (객체생성키워드)      (클래스)

1) 자바가 main을 실행시키기 위해 GoodsApp.class를 실행함

2) GoodsApp의 main에는 필드와 메소드가 있을수있음 (method-area에 들어감)

3) new Goods()를 보고 Goods클래스의 객체를 생성 (heap에 들어감)

4) 생성한 객체를 사용하기 위해 만든 레퍼런스 변수를 'goods'로 설정 (stack에 들어감, main실행이 끝나면 사라짐)



5. 접근제어자
private - 클래스 내부에서만

protected - (상속에서) 자식이 부모에게 접근할때

(디폴트) - 같은 패키지에서만 (실무에서 잘 쓰지는 않음. 무조건 접근자를 명시하라는 뜻!!)

public - 제한없음


1) private는 클래스 내부에서만 쓸 수 있도록 함. 정보를 은닉시켜 외부로부터 보호함.
정보를 보호하고싶은마음은 그렇다치고 다른 클래스에서 참조를 하고 싶다면??
따로 setter와 getter 메소드를 만들어서 참조하는방식으로 한다. 

2) protected는 private처럼 외부로부터 정보를 보호시켜주되 자식만은 접근이 가능하도록 해주는 접근제어자.

3) 디폴트는 그냥 접근제어자를 안써준 상태... 이는 실무에서 매우 안좋은습관이다.

4) public은 메소드에서 많이 쓰는 접근제어자이다. 필드에서는 private를 많이씀.



6. 자바의 메모리구조와 변수의 종류
1) Method Area
|   main클래스가 실행될때
|
|   (static)클래스변수, (static)클래스메소드
|   인스턴스변수, 인스턴스메소드로 구성되어있다.
|
2) Stack Area
|   메소드 내에서 선언문을 수행할때
|   조건문, 반복문의 블럭{} 내에 선언됨 = 지역변수
|
3) Heap Area
    new를 사용해서 인스턴스 생성시
    각 인스턴스의 개별적인 공간이 생김 = 인스턴스변수



7. 메소드
객체의 기능을 정의하는 함수
반환 값이 없을 때는 메소드를 짤때 void를 넣어줘야함
매개변수(parameter) : 메소드를 선언할 때 괄호 안에 표현된 input값을 나타내는 변수

1) return값도 없고 매개변수도 없는 메소드
2) return값이 없고 매개변수가 있는 메소드 settet
3) return값이 있고 매개변수가 없는 메소드 getter
4) return값이 있고 매개변수도 있는 메소드