1. 컬렉션 프레임워크
다수의 데이터를 쉽게 처리할 수 있는 방법을 제공하는 클래스들의 구성

ex) List, Set, Map



2. List
순서가있음, 중복을허용

구현클래스 : ArrayList - 배열로만듬 , LinkedList - 참조로만듬
ex) List<String> l = new ArrayList<>();

한번 쭈욱~ 넣다뺐다~  <<<   ArrayList
이것저것~ 넣다뺐다~  <<<   LinkedList



3. Set
순서필요없음, 중복x
ex) Set<String> s = new HashSet<>();



4. Map
딕셔너리형
ex) Map<String, Integer> m = new HashMap<>();



5. Stack (원통형)
ex) Stack<String> stack = new Stack<>();
stack.push("내용");
stack.pop();   <<<   맨 마지막에 넣은 자료를 뺌
stack.peek();   <<<  맨 마지막에 넣은 자료를 확인함(빼지는 않음)



6. Queue (눕혀진 원통형)
필요성
"통신은 요청이 있으면 응답이 있어야함"
요청을 했는데 서버에서 응답을 보낼동안 요청한사람은 멍때리게됨
이럴때 보낸 요청을 Queue에 넣어주면 요청한사람은 멍때리지않아도됨(일종의 버퍼링역할)

ex) Queue<String> q = new LinkedList<>();
q.offer("내용");
q.poll();   <<<   맨 먼저 넣은 자료를 뺌