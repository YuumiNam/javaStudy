1. 상속과 생성자
"자식클래스의 인스턴스가 생성될 때, 부모의 생성자도 실행이될까??"
자식생성자 = this, 부모생성자 = super()
자식생성자를 지정해주지않으면 자동으로 부모생성자도 써준다.



2. 객체의 형변환
업 캐스팅(up casting)
자식클래스가 부모클래스의 타입으로 변환되는것
(상속받는 클래스가 부모클래스를 쓸수있는것은 당연하기때문에 명시적으로 타입변환을 할 필요가 없다.)

다운 캐스팅(down casting)
업 캐스팅 된 것을 원래대로 되돌리는것
명시적으로 타입변환을 하여야한다.



3. 추상클래스
실체클래스를 만들기 위한 부모클래스로만 사용되는 클래스
(객체를 직접 생성해서 사용 할 수 없다)
추상클래스에는 하나 이상의 추상메소드를 가지고 추상메소드는 자식클래스에서 반드시 구현해야한다.


"확장 만을 위한 용도로 사용"


(부모)             (자식)
도형   -   삼각형 사각형 원

삼각형, 사각형, 원은 도형이라는 공통점이 있으므로 상속을받음
|
하지만 부모클래스에서 draw() 메소드를 만들때
'삼각형을그린다, 사각형을그린다, 원을그린다'를 한번에 정의할 수 없음
|
이럴때 부모클래스를 추상클래스로 만들어
draw()의 구체적인 기능은 자식클래스에서 만들면 된다.



4. 인터페이스(캡슐화)
서로 관계가 없는 물체들이 상호작용을 하기 위해서 사용
클래스들 사이의 유사한 특성을 부자연스러운 상속관계를 설정하지않고 얻어냄
ex) AirPlane과 Bird는 전혀다른 물체지만 '날수있다'라는 공통된 기능


인터페이스는 메소드에 설정을 안해줘도 기본이 public


인터페이스를 구현한 클래스에서 추상 메소드를 반드시 정의해야함


인터페이스는 다중상속을 지원하지 않는 자바에서
다중상속의 장점을 활용하기위해 도입
(인터페이스끼리는 다중상속이 가능)


(부모)                (자식)
포인트       -   컬러포인트
도형          -   삼각형, 사각형, 원

"포인트와 도형도 합칠 수 있을까??"
(두 클래스는 '그려진다 라는 공통점이 있음)
|
현재상황은
main클래스에 정적메소드 drawPoint()와 drawShape()가 따로 있는상황
하지만 "그려진다" 라는 공통된 속성으로 묶으면 두개를 분리해서 만들필요가 없고
나중에 다른기능을 확장할때에도 ex) 글쓰는기능
또다른 메소드를 만들 필요가 없음 
|
하지만 도형클래스에는 있는 lineColor()와 fillColor() 기능을
포인트클래스에는 쓰지않으므로 추상화도 할수없고
두 클래스의 특징,기능을 보면 상속관계일수도 없다.
|
이럴때 interface를 쓴다.



5. intanceof
어떤 레퍼런스가 어떤클래스와 상속관계인지를 알고싶을 때 씀
(레퍼런스 변수) instanceof (클래스)

ex) System.out.println(circle instanceof Shape);
ex) System.out.println(circle instanceof Rectangle); <<< instanceof에서 class자리에는 상위와 하위만 쓸수있으므로 이거는 오류


하지만, interface는 상관없이 instanceof연산자를 사용가능 "상속이 됐냐 안됐냐가 아닌, 기능이 구현됐냐 안됐냐의 문제이기 때문"
ex) System.out.println(circle instanceof Drawable);
ex) System.out.println(circle instanceof Runnable);




6. 패키지의 기능과 장점
서로 관련있는 클래스 또는 인터페이스들의 묶음
구조에 맞게 잘 설정하는것이 중요(회사들은 도메인주소를 거꾸로 뒤집어서 유일한 패키지명을 만든다)

장점
1) 클래스들을 묶음 단위로 제공하여 필요할 때만 사용 가능(import)
2) 클래스 이름의 혼란을 막아서 충돌을 방지



com.bitacademy.paint.main
com.bitacademy.paint.i
com.bitacademy.paint.point
com.bitacademy.paint.shape
com.bitacademy.paint.text











