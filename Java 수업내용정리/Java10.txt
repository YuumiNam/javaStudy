1. Object클래스 - equals()

ex)
Point p1 = new Point(10,20) , Point p2 = new Point(10,20) , p3 = p2

'동일성비교'
p1 == p2 'false'
p2 == p3 'true'

'동질성비교'
p1.equals(p2) 'false' "어? 동질성비교인데 내용같은데 왜 false로나오지??"
	             object클래스의 equals()메소드를 만든사람은 지금 우리가 뭔 객체를 비교할지를 모르기때문에 기본 리턴값을 동일성(==)비교로 설정
	             그러므로 여기서 내용비교로 equals()를 쓰려면 Point 클래스에 equals()메소드를 override를 한다음 써야함
p2.equals(p3) 'true' 




2. 해시코드의 의의
"equals()를 오버라이드할때에는 해시코드도 같이 오버라이드해야함"  <<<  성능문제
 
동질성 개념에서
동일한 객체는 동일한 메모리 주소를 갖는다는 것을 의미하므로
동일한 객체는 동일한 해시코드를 가져야 한다.
그렇기 때문에 만약 우리가 equals() 메소드를 오버라이드 한다면, hashCode() 메소드도 오버라이드 되어야 한다.

객체의 내용을 비교하기 전 (동질성 비교)
해싱 값이 같은지 먼저 비교해야한다.

결론 : equals() 단독으로쓰지말고 꼭 해시코드랑 같이 오버라이드를 하자




3. 자바 제공 자료구조 클래스
ex) List Set Map(딕셔너리) Stack

1) 순서를 구분할지
O : List , X : Set

2) 중복을 허용
O : List , X : Set

Set은 중복을 허용하지않음
중복을 걸러내는 과정에서 내용(동질성)이 중요한것이지 동일성이 중요하지는않음
그래서 중복인지 아닌지 걸러내는 과정에서 hashCode()를 필요로하게됨
해시코드값이 다르면 다른 객체로 판단하고, 해시 코드값이 같으면 그때 equals()메소드로 다시 비교해서 레퍼런스 값도 같다면 동등 객체로 판단함




4. String
지금까지 String을 쓸때
String s1 = "Hello"; 이런식으로 썼는데
객체지향을 배웠다면, 이게 말이 안된다는걸 알아야함

String s1 = new String("Hello");  <<<  이렇게 쓴다면 납득이 간다.
String s2 = new String("Hello");
System.out.println(s1 == s2); 동일성비교 'false'

String s3 = "Hello";
String s4 = "Hello";
System.out.println(s3 == s4); 동일성비교 'true'  "어?? 왜 동일성이 같다고 나올까??"


원래라면 객체는 무조건 heap에 저장된다.
하지만 리터럴을 했을때는 heap이 아닌 ConstantPool에 저장이되고, 레퍼런스 값을 참조할때만 heap에 저장이 된다("Hello"는 heap에 저장)
그리고 그 레퍼런스 값은 s3와 s4가 모두 공유한다.

"String이 객체임에도 불구하고 왜 new를 쓰지않는가??"
리터럴은 객체끼리의 구분이 필요한것이 아니라 "s3와 s4의 내용이 같은가"가 중요하기때문에 레퍼런스 값을 공유시켜야한다.

결론 : String은 new로 만들었을때와 리터럴로 만들었을때는 다르다.




5. StringBuffer()
이게 되는이유는??
ex) String s1 = "Hello " + "World " + "Java " + 12;

내부적으로는 이렇게 StringBuffer를 씀
String s2 = new StringBuffer("Hello ").append("World ").append("Java ").append(12).toString();
System.out.println(s2);

결론적으로는,
그냥 리터럴도 편하게 그냥 '+'연산자를 쓰자

단, 반복문에서
더해야하는 값이 많을때 '+'연산으로 리터럴을 쓰게되면
연산이 아주 느려져서 좋지않으므로
이럴때는 StringBuffer()를 명시해준다.



6. Wapper클래스
기본 데이터형을 객체형식으로 포장하는것
리터럴 String처럼 wrapper class도 불변성이 기본

굳이 이렇게까지는 쓸필요없음
Integer i = new Integer(10);
Character c = new Character('c');

Auto Boxing
Integer i2 = 10;
Character c2 = 'c';


<문자를 숫자로 바꾸고싶을때>
wrapper class로 접근해서 parseInt() 메소드 호출
String s1 = "123456";
int i = Integer.parseInt(s1);
		
<반대로>
String s2 = String.valueOf(i);


