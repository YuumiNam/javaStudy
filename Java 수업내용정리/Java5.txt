1. 배열
자바는 'new' 키워드가 없으면 절대! 객체를 만들지 못함
배열 또한 new로 생성되는 참조 자료형이다.
배열에 포함된 각 값들은 기본자료형일수도 있고, 다른 객체를 참조하는 클래스형일수도 있다.


ex) int[] a = new int[5];
"배열에 다섯개의 빈 방을 만들고, 변수배열 a의 [i]번째에 숫자가 들어감"


차이점을 알아보자
ex) Student s = new Student();     vs     Student[] s = new Student[3];
     객체를 생성                                 3개의 방에 참조값을 넣어줌 (그 다음 객체를 생성해줘야함)
                                                      s[0] = new Student();





2. 이클립스에서 만든 파일을 cmd에서 실행하는법
1) 원하는 패키지가 있는곳으로 이동한다.
2) (패키지명이 chapter01, 클래스명이 Studying이라면) java chapter01.Studying 이라고 쳐야함





3. 객체지향 - 기본개념
1) RDBMS에서 ERD를 하는 과정과 비슷
엔티티 간 정규화를 하는 것처럼, 각 클레스 간 역할과 관계를 정해야한다.


2) 클래스명 - 속성(필드) - 기능(메소드)


3) 클래스의 재사용성 오해하지말기
객체가 가지는 속성과 기능을 알맞게 표현해야하므로 모든 객체는 다른 클래스에 재사용되기 어려울수있다.
자바의 재사용성이 좋다는 것은 '코드의 재사용성'을 말하는것이다(상속을 통한).


4)클래스, 인스턴스(객체), 레퍼런스
클래스 - 설계도,  인스턴스(객체) - 설계도를받아만들어진클래스,  레퍼런스 - 기능을불러오기위한변수


5) int a = 10;  int b = a;
a와 b의 값은 둘 다 10이지만,
a는 숫자 10이 변수 a 안에 저장된 값이지만
b는 a의 값을 레퍼런스해서 가져온 값이므로 값은 같지만 값의 종류가 다르다.




4. 객체지향 - 상속(확장) - 추상클래스와 override(객체지향의 꽃)
new를 하지 못하는 클래스(인스턴스를 할수없는) = '추상클래스'
"왜 인스턴스를 못하게할까??" "왜 추상클래스가 필요할까??"

공통점이 있는 여러가지 물체들을 하나의 이름으로 부르는 것을 "일반화"라고 한다.
'추상클래스'는 "일반화"를 하기 위한 목적으로만 사용이된다. (일반화 = 자바에서의 상속)

ex) '포유류' - '움직인다()'를 가진 부모클래스,     '인간' , '강아지' 자식클래스
인간과 강아지 둘다 '움직인다()' 라는 메소드를 사용가능하지만,
인간은 두발로 걷고 강아지는 네발로걸음. 어디에 맞춰야할지 모르겠음.
이럴때 부모클래스를 추상클래스로 만들어서 '움직인다()'를 아직 구현안된 메소드로 만들고
구체적인것은 자식클래스에서 받아쓸때 정해주도록 함.

굳이 '추상클래스'까지 만들어가면서까지 상속관계를 만들어주는이유
재사용성(30점) + 확장성(70점)

확장이라는 개념을 알려면 다음 코드가 자연스럽게 이해해야됨.
ex) 포유류 m = new 사람();   <<<   자식객체는 부모클래스로 참조할수있다. 왜?? 확장성때문
m.움직인다()   <<   부모클래스(포유류)의 메소드를 썼지만, override를 통해서 자식클래스(사람)에서의 움직인다()로 쓸수있음.


  

5. 인터페이스 (추상클래스보다 더 한 확장성)
추상클래스를 통한 overriding의 장점은 알았다.
추상클래스에 여러 메소드도 있고 여러가지 속성들도 있을텐데,
"난 메소드를 가져오고싶은데 추상클래스에 대한 모든 속성값들을 다 알아야하나...??" 라는 걱정을 할 때
인터페이스를 통해서 속성들을 은닉화 할 수 있다.




6. 앞으로의 커리큘럼
1) 클래스 - 변수, 메소드, 생성자
       |
2)  정보은닉 캡슐화
       |
3) 상속
       |
4) 다형성 - 오버로딩, 오버라이딩
       |
5) 추상클래스 인터페이스
       |
6) API

